#!/usr/bin/env bash

# colors
nc="\[\e[0m\]";   # no color
r="\[\e[0;31m\]"; # red
y="\[\e[0;33m\]"; # yellow
g="\[\e[0;32m\]"; # green
b="\[\e[0;34m\]"; # blue
v="\[\e[0;35m\]"; # violet

prompt_git() {
  local s="";
  local branchName="";
  local commit="";
  # check if the current directory is in a git repository
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
      # ensure the index is up to date
      git update-index --really-refresh -q &>/dev/null;
      # check for uncommitted changes in the index
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+="+";
      fi;
      # check for unstaged changes
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+="!";
      fi;
      # check for untracked files
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+="?";
      fi;
      # check for stashed files
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+="$";
      fi;
    fi;

    # get the short symbolic ref if head isnâ€™t a symbolic ref, get
    # the short sha for the latest commit otherwise, just give up
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";
    [ -n "${s}" ] && s=" [${s}]";
    echo -e "${1}${branchName}${2}${s} ";
  else
    return;
  fi;
}

# set the terminal title and prompt.
PS1="${v}\W${nc} \$(prompt_git \"on ${y}\")${nc}> ";
export PS1;
